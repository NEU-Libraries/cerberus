:css
  circle,
  path {
    cursor: pointer;
  }

  circle {
    fill: none;
    pointer-events: all;
  }

  path {
    stroke: #fff;
    fill-rule: evenodd;
  }

  .tooltip { background-color: white;
    			  padding: 3px 5px;
    			  border: 1px solid black;
    			  text-align: center;}

= render partial: "tabs"
.tab-content
  .tab-pane.active{:id => "##{type}"}
    %script{:src => "https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.min.js"}
    :javascript
      var width = 800,
          height = 900,
          radius = Math.min(width, height) / 2;

      var x = d3.scale.linear()
          .range([0, 2 * Math.PI]);

      var y = d3.scale.sqrt()
          .range([0, radius]);

      //var color = d3.scale.category20c();
      var hue = d3.scale.category20();

      var luminance = d3.scale.sqrt()
          .domain([0, 1e6])
          .clamp(true)
          .range([90, 20]);

      var svg = d3.select(".tab-pane.active").append("svg")
          .attr("width", width)
          .attr("height", height)
          .attr("style", "display:block; margin:auto;")
        .append("g")
          .attr("transform", "translate(" + width / 2 + "," + (height / 2 + 10) + ")");

      var partition = d3.layout.partition()
          .value(function(d) { return d.size; });

      var arc = d3.svg.arc()
          .startAngle(function(d) { return Math.max(0, Math.min(2 * Math.PI, x(d.x))); })
          .endAngle(function(d) { return Math.max(0, Math.min(2 * Math.PI, x(d.x + d.dx))); })
          .innerRadius(function(d) { return Math.max(0, y(d.y)); })
          .outerRadius(function(d) { return Math.max(0, y(d.y + d.dy)); });


        var tooltip = d3.select(".tab-pane.active")
          .append("div")
          .attr("class", "tooltip")
          .style("position", "absolute")
          .style("z-index", "10")
          .style("opacity", 0);

        function format_number(x) {
          //return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
          return humanFileSize(x, true);
        }


        function format_name(d) {
          var name = d.name;
              return  '' + name + ' (' + format_number(d.value) + ')';
        }

      d3.json("#{api_v1_file_sizes_url}", function(error, root) {

        var path = svg.selectAll("path")
            .data(partition.nodes(root))
          .enter().append("path")
            .attr("d", arc)
            .style("fill", function(d) {
              var p = d;
              var depth = 0
              while (p.depth > 1) {
                p = p.parent;
                depth += 1;
              }
              var c = d3.lab(hue(p.name));
              c.l = (luminance(d.value) + (depth * 10));
              return c;
            })
            .on("click", click)
             .on("mouseover", function(d) {
                tooltip.html(function() {
                    var name = format_name(d);
                    return name;
               });
                return tooltip.transition()
                  .duration(50)
                  .style("opacity", 0.9);
              })
              .on("mousemove", function(d) {
                return tooltip
                  .style("top", (d3.event.pageY-10)+"px")
                  .style("left", (d3.event.pageX+10)+"px");
              })
              .on("mouseout", function(){return tooltip.style("opacity", 0);});



        function click(d) {
          path.transition()
            .duration(750)
            .attrTween("d", arcTween(d));
        }
      });

      d3.select(self.frameElement).style("height", height + "px");

      // Interpolate the scales!
      function arcTween(d) {
        var xd = d3.interpolate(x.domain(), [d.x, d.x + d.dx]),
            yd = d3.interpolate(y.domain(), [d.y, 1]),
            yr = d3.interpolate(y.range(), [d.y ? 20 : 0, radius]);
        return function(d, i) {
          return i
              ? function(t) { return arc(d); }
              : function(t) { x.domain(xd(t)); y.domain(yd(t)).range(yr(t)); return arc(d); };
        };
      }

      function humanFileSize(bytes, si) {
        var thresh = si ? 1000 : 1024;
        if(Math.abs(bytes) < thresh) {
            return bytes + ' B';
        }
        var units = si
            ? ['kB','MB','GB','TB','PB','EB','ZB','YB']
            : ['KiB','MiB','GiB','TiB','PiB','EiB','ZiB','YiB'];
        var u = -1;
        do {
            bytes /= thresh;
            ++u;
        } while(Math.abs(bytes) >= thresh && u < units.length - 1);
        return bytes.toFixed(1)+' '+units[u];
      }
